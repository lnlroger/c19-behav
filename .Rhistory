View(df.real.diff)
df.now <- df.real.diff %>%
filter(Country == cty)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now,
p = p.now , q = q.now)
View(df.now)
ardl.now
df.now <- df.real.diff %>%
filter(Country == cty) %>%
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[[-"Country"]],
p = p.now , q = q.now)
View(df.now)
df.now <- df.real.diff %>%
filter(Country == cty) %>%
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-"Country"],
p = p.now , q = q.now)
df.now <- df.real.diff %>%
filter(Country == cty) %>%
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
df.now <- df.real.diff %>%
filter(Country == cty) %>%
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[-1,],
p = p.now , q = q.now)
df.now <- df.real.diff %>%
filter(Country == cty) %>%
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now,
p = p.now , q = q.now)
df.now <- df.real.diff %>%
filter(Country == cty) %>%
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now,
p = p.now , q = q.now)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
df.now <- df.real.diff %>%
filter(Country == cty)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
p.now <- 3
q.now <- 3
df.real.diff <- df.real %>%
group_by(Country) %>%
mutate(diff.Movement = c(NA, diff(Movement)),
diff.StringencyIndex = c(NA, diff(StringencyIndex))) %>%
select(Country, Date, Movement, StringencyIndex, diff.Movement, diff.StringencyIndex) %>%
na.omit()
list.forecast.collect <- list()
for (cty in unique(df.real.diff$Country)) {
df.now <- df.real.diff %>%
filter(Country == cty)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
ardl.now$model$coefficients
lr.coefficient.now <- sum(ardl.now$model$coefficients[c("diff.StringencyIndex.t",
paste0("diff.StringencyIndex.",1:p.now))]) /
(1-sum(ardl.now$model$coefficients[paste0("diff.Movement.",1:q.now)]))
forecast.now <- forecast(ardl.now, df.now$diff.StringencyIndex,
h = length(df.now$diff.StringencyIndex))
forecast.test.integrate <- diffinv(as.numeric(forecast.now$forecasts))
df.now <- df.now %>%
mutate(Forecast = forecast.test.integrate[-1])
list.forecast.collect[[cty]] <- df.now
}
df.plot <- df.real.test %>%
pivot_longer(cols = c("Movement","StringencyIndex","Forecast"), names_to = "Variable")
df.forecasts <- bind_rows(list.forecast.collect)
df.plot <- df.forecasts %>%
pivot_longer(cols = c("Movement","StringencyIndex","Forecast"), names_to = "Variable")
ggplot(df.plot, aes(Date, value, colour = Variable)) +
geom_line() +
theme_bw() +
facet_wrap(~Country)
df.plot <- df.forecasts %>%
pivot_longer(cols = c("Movement","StringencyIndex","Forecast"), names_to = "Variable") %>%
filter(Country %in% c("United Kingdom", "United States", "Germany", "Greece", "Zimbabwe", "Russia"))
ggplot(df.plot, aes(Date, value, colour = Variable)) +
geom_line() +
theme_bw() +
facet_wrap(~Country)
collect.lr.coeffs <- data.frame(Country = unique(df.real.diff$Country))
collect.lr.coeffs
p.now <- 3
q.now <- 3
df.real.diff <- df.real %>%
group_by(Country) %>%
mutate(diff.Movement = c(NA, diff(Movement)),
diff.StringencyIndex = c(NA, diff(StringencyIndex))) %>%
select(Country, Date, Movement, StringencyIndex, diff.Movement, diff.StringencyIndex) %>%
na.omit()
list.forecast.collect <- list()
collect.lr.coeffs <- data.frame(Country = unique(df.real.diff$Country))
collect.lr.coeffs
collect.lr.coeffs
collect.lr.coeffs <- data.frame(Country = unique(df.real.diff$Country),
lr.coeff = NA)
collect.lr.coeffs
for (cty in unique(df.real.diff$Country)) {
df.now <- df.real.diff %>%
filter(Country == cty)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
ardl.now$model$coefficients
lr.coefficient.now <- sum(ardl.now$model$coefficients[c("diff.StringencyIndex.t",
paste0("diff.StringencyIndex.",1:p.now))]) /
(1-sum(ardl.now$model$coefficients[paste0("diff.Movement.",1:q.now)]))
forecast.now <- forecast(ardl.now, df.now$diff.StringencyIndex,
h = length(df.now$diff.StringencyIndex))
forecast.test.integrate <- diffinv(as.numeric(forecast.now$forecasts))
df.now <- df.now %>%
mutate(Forecast = forecast.test.integrate[-1])
list.forecast.collect[[cty]] <- df.now
collect.lr.coeffs[which(collect.lr.coeffs$Country == cty),"lr.coeff"] <- lr.coefficient.now
}
p.now <- 3
q.now <- 3
df.real.diff <- df.real %>%
group_by(Country) %>%
mutate(diff.Movement = c(NA, diff(Movement)),
diff.StringencyIndex = c(NA, diff(StringencyIndex))) %>%
select(Country, Date, Movement, StringencyIndex, diff.Movement, diff.StringencyIndex) %>%
na.omit()
list.forecast.collect <- list()
collect.lr.coeffs <- data.frame(Country = unique(df.real.diff$Country),
lr.coeff = NA)
for (cty in unique(df.real.diff$Country)) {
df.now <- df.real.diff %>%
filter(Country == cty)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
ardl.now$model$coefficients
lr.coefficient.now <- sum(ardl.now$model$coefficients[c("diff.StringencyIndex.t",
paste0("diff.StringencyIndex.",1:p.now))]) /
(1-sum(ardl.now$model$coefficients[paste0("diff.Movement.",1:q.now)]))
forecast.now <- forecast(ardl.now, df.now$diff.StringencyIndex,
h = length(df.now$diff.StringencyIndex))
forecast.test.integrate <- diffinv(as.numeric(forecast.now$forecasts))
df.now <- df.now %>%
mutate(Forecast = forecast.test.integrate[-1])
list.forecast.collect[[cty]] <- df.now
collect.lr.coeffs[which(collect.lr.coeffs$Country == cty),"lr.coeff"] <- lr.coefficient.now
}
df.forecasts <- bind_rows(list.forecast.collect)
countries.to.plot <- c("United Kingdom", "United States", "Germany", "Greece", "Zimbabwe", "Russia")
df.plot <- df.forecasts %>%
pivot_longer(cols = c("Movement","StringencyIndex","Forecast"), names_to = "Variable") %>%
filter(Country %in% countries.to.plot)
ggplot(df.plot, aes(Date, value, colour = Variable)) +
geom_line() +
theme_bw() +
facet_wrap(~Country)
p.now <- 3
q.now <- 3
df.real.diff <- df.real %>%
group_by(Country) %>%
mutate(diff.Movement = c(NA, diff(Movement)),
diff.StringencyIndex = c(NA, diff(StringencyIndex))) %>%
select(Country, Date, Movement, StringencyIndex, diff.Movement, diff.StringencyIndex) %>%
na.omit()
list.forecast.collect <- list()
collect.lr.coeffs <- data.frame(Country = unique(df.real.diff$Country),
lr.coeff = NA)
for (cty in unique(df.real.diff$Country)) {
df.now <- df.real.diff %>%
filter(Country == cty)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
ardl.now$model$coefficients
lr.coefficient.now <- sum(ardl.now$model$coefficients[c("diff.StringencyIndex.t",
paste0("diff.StringencyIndex.",1:p.now))]) /
(1-sum(ardl.now$model$coefficients[paste0("diff.Movement.",1:q.now)]))
forecast.now <- forecast(ardl.now, df.now$diff.StringencyIndex,
h = length(df.now$diff.StringencyIndex))
forecast.test.integrate <- diffinv(as.numeric(forecast.now$forecasts))
df.now <- df.now %>%
mutate(Forecast = forecast.test.integrate[-1])
list.forecast.collect[[cty]] <- df.now
collect.lr.coeffs[which(collect.lr.coeffs$Country == cty),"lr.coeff"] <- lr.coefficient.now
}
df.forecasts <- bind_rows(list.forecast.collect)
countries.to.plot <- c("United Kingdom", "United States", "Germany", "Greece", "Zimbabwe", "Russia")
df.plot <- df.forecasts %>%
pivot_longer(cols = c("Movement","StringencyIndex","Forecast"), names_to = "Variable") %>%
filter(Country %in% countries.to.plot)
ggplot(df.plot, aes(Date, value, colour = Variable)) +
geom_line() +
theme_bw() +
facet_wrap(~Country)
print("Long-run coefficients:")
print(collect.lr.coeffs[which(collect.lr.coeffs$Country == countries.to.plot),])
print(collect.lr.coeffs[which(collect.lr.coeffs$Country %in% countries.to.plot),])
p.now <- 3
q.now <- 3
df.real.diff <- df.real %>%
group_by(Country) %>%
mutate(diff.Movement = c(NA, diff(Movement)),
diff.StringencyIndex = c(NA, diff(StringencyIndex))) %>%
select(Country, Date, Movement, StringencyIndex, diff.Movement, diff.StringencyIndex) %>%
na.omit()
list.forecast.collect <- list()
collect.lr.coeffs <- data.frame(Country = unique(df.real.diff$Country),
lr.coeff = NA)
for (cty in unique(df.real.diff$Country)) {
df.now <- df.real.diff %>%
filter(Country == cty)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
ardl.now$model$coefficients
lr.coefficient.now <- sum(ardl.now$model$coefficients[c("diff.StringencyIndex.t",
paste0("diff.StringencyIndex.",1:p.now))]) /
(1-sum(ardl.now$model$coefficients[paste0("diff.Movement.",1:q.now)]))
forecast.now <- forecast(ardl.now, df.now$diff.StringencyIndex,
h = length(df.now$diff.StringencyIndex))
forecast.test.integrate <- diffinv(as.numeric(forecast.now$forecasts))
df.now <- df.now %>%
mutate(Forecast = forecast.test.integrate[-1])
list.forecast.collect[[cty]] <- df.now
collect.lr.coeffs[which(collect.lr.coeffs$Country == cty),"lr.coeff"] <- lr.coefficient.now
}
df.forecasts <- bind_rows(list.forecast.collect)
countries.to.plot <- c("United Kingdom", "United States", "Germany", "Greece", "Zimbabwe", "Sweden")
df.plot <- df.forecasts %>%
pivot_longer(cols = c("Movement","StringencyIndex","Forecast"), names_to = "Variable") %>%
filter(Country %in% countries.to.plot)
ggplot(df.plot, aes(Date, value, colour = Variable)) +
geom_line() +
theme_bw() +
facet_wrap(~Country)
print("Long-run coefficients:")
print(collect.lr.coeffs[which(collect.lr.coeffs$Country %in% countries.to.plot),])
p.now <- 3
q.now <- 3
df.real.diff <- df.real %>%
group_by(Country) %>%
mutate(diff.Movement = c(NA, diff(Movement)),
diff.StringencyIndex = c(NA, diff(StringencyIndex))) %>%
select(Country, Date, Movement, StringencyIndex, diff.Movement, diff.StringencyIndex) %>%
na.omit()
list.forecast.collect <- list()
collect.lr.coeffs <- data.frame(Country = unique(df.real.diff$Country),
lr.coeff = NA)
for (cty in unique(df.real.diff$Country)) {
df.now <- df.real.diff %>%
filter(Country == cty)
ardl.now <-ardlDlm(formula = diff.Movement ~ diff.StringencyIndex,
data = df.now[,-1],
p = p.now , q = q.now)
ardl.now$model$coefficients
lr.coefficient.now <- sum(ardl.now$model$coefficients[c("diff.StringencyIndex.t",
paste0("diff.StringencyIndex.",1:p.now))]) /
(1-sum(ardl.now$model$coefficients[paste0("diff.Movement.",1:q.now)]))
forecast.now <- forecast(ardl.now, df.now$diff.StringencyIndex,
h = length(df.now$diff.StringencyIndex))
forecast.test.integrate <- diffinv(as.numeric(forecast.now$forecasts))
df.now <- df.now %>%
mutate(Forecast = forecast.test.integrate[-1])
list.forecast.collect[[cty]] <- df.now
collect.lr.coeffs[which(collect.lr.coeffs$Country == cty),"lr.coeff"] <- lr.coefficient.now
}
df.forecasts <- bind_rows(list.forecast.collect)
countries.to.plot <- c("United Kingdom", "United States", "Germany", "Greece", "Zimbabwe", "South Korea")
df.plot <- df.forecasts %>%
pivot_longer(cols = c("Movement","StringencyIndex","Forecast"), names_to = "Variable") %>%
filter(Country %in% countries.to.plot)
ggplot(df.plot, aes(Date, value, colour = Variable)) +
geom_line() +
theme_bw() +
facet_wrap(~Country)
print("Long-run coefficients:")
print(collect.lr.coeffs[which(collect.lr.coeffs$Country %in% countries.to.plot),])
print("hihihi")
for (i in NULL) {
print("hihihi")
}
for (i in NULL) {
print("hihihi")
}
for (i in 1:3) {
print("hihihi")
}
?lm
rm(list = ls())
source("ARDL_fun.r")
library("tidyverse")
setwd("C:/Users/lnlro/Dropbox/Research/COVID-19/COVID-19/code")
rm(list = ls())
source("ARDL_fun.r")
library("tidyverse")
df <- readRDS("../CityLevel_DoARDL.rds")
df2<- df %>%
mutate(diff.Movement = c(NA, diff(Movement)),
diff.StringencyIndex = c(NA, diff(StringencyIndex)),
diff.PRCP = c(NA, diff(PRCP)),
diff.Temp_C = c(NA, diff(Temp_C))) %>%
dplyr::select(Country,City, Date, diff.Movement, diff.StringencyIndex,
diff.PRCP, diff.Temp_C) %>%
drop_na()
df2$diff.PRCP <- df2$diff.PRCP +rnorm(length(df2$diff.PRCP),0.01)
ARDL_cov <- ARDL.flex(data.input = df2,depvar = "diff.Movement", indepvar = c("diff.StringencyIndex",
"diff.PRCP",
"diff.Temp_C"),by.var = "City",
max.p = 7, max.q = 7)
data.input = df2
depvar = "diff.Movement"
indepvar = c("diff.StringencyIndex",
"diff.PRCP",
"diff.Temp_C")
by.var = "City"
max.p = 7
max.q = 7
impulsevar = "diff.StringencyIndex"
write.output = FALSE
path.output = "ARDL-output.RData"
vars.to.deseason = "diff.Movement"
seasonality = NULL
t.min = 30
library("tidyverse")
library("lubridate")
library("vars")
library("zoo")
library("dLagM")
library("lmtest")
# Prepare dataset  ----
df.ARDL <- data.input
df.ARDL["ObsUnit"] <- df.ARDL[by.var]
df.ARDL <- df.ARDL %>%
filter(n() >= t.min)
n.units <- length(unique(df.ARDL$ObsUnit))
# Prepare empty data.frame to store key results in
ardl.summary <- data.frame(ObsUnit = unique(df.ARDL$ObsUnit),
LongRunCoefficient = rep(NA,n.units),
p.best = rep(NA,n.units),
q.best = rep(NA,n.units),
bg.pval.best = rep(NA,n.units),
bic.best = rep(NA,n.units),
r2.best = rep(NA,n.units),
r2.adj.best = rep(NA,n.units))
# Prepare empty matrices to store key test statistics in for all considered models
bg.matrix <- matrix(data = rep(NA,max.q*max.p),
nrow = max.p, ncol = max.q,
dimnames = list(paste0("p=",1:max.p),
paste0("q=",1:max.q)))
bic.matrix = bg.matrix
lr.matrix = bg.matrix
# Combine y and x (or several x's) into formula for ARDL
formula.ardl.char <- paste(depvar, " ~ ", paste(indepvar,collapse = "+"))
formula.ardl <- as.formula(formula.ardl.char)
rm(formula.ardl.char)
# Create list to store all output resulting from function (object to return)
output.ardl <- list()
# Loop running over each Country (or other observational unit)
i <- 1
# Restrict dataset to current country
for (ctry in unique(df.ARDL$ObsUnit)) {
df.now <- df.ARDL %>%
filter(ObsUnit == ctry)
# If desired, remove seasonality by regressing weekday dummies on depvar and
# preserving residuals (~Frisch-Waugh-Lovell Theorem)
df.now$weekday <- weekdays(df.now$Date)
for (v in vars.to.deseason) {
df.now[v] <- remove.seasonality(data = df.now,
var.to.clean = v,
seasonal.var = seasonality)
}
# Run ARDL for all possible lag combinations and store selection criteria
for (p.ardl in 1:max.p) { # Lags of independent variable
for (q.ardl in 1:max.q) { # Autoregressive lags
# Run estimation
model.ardl <- ardlDlm(formula = formula.ardl,
data = df.now,
p = p.ardl , q = q.ardl)
# Store specification criteria in respective matrices
bgtest.now <- bgtest(model.ardl$model, order = 2, type = "F")
bg.matrix[p.ardl,q.ardl] <- bgtest.now$p.value
bic.matrix[p.ardl,q.ardl] <- BIC(model.ardl$model)
# As well as lr-coefficient resulting from the model
lr.numerator.this <-
sum(model.ardl$model$coefficients[c(paste0(impulsevar,".t"),
paste0(impulsevar,".",1:p.ardl))])
lr.denominator.this <-
(1-sum(model.ardl$model$coefficients[paste0(depvar,".",1:q.ardl)]))
lr.matrix[p.ardl,q.ardl] <- lr.numerator.this / lr.denominator.this
}
}
# Store specification criteria & LR matrices in output list for later reference
output.ardl[["bgtest"]][[ctry]] <- bg.matrix
output.ardl[["bic"]][[ctry]] <- bic.matrix
output.ardl[["longrun"]][[ctry]] <- lr.matrix
# Select best model in two steps:
# 1. Identify subset of models that do not exhibit autocorrelation according to BG test
# 2. Select the model with lowest BIC from that subset.
bg.matrix.pass <- bg.matrix >= 0.1
if(sum(bg.matrix.pass > 0)){
bic.matrix.smallest <- min(bic.matrix[which(bg.matrix.pass == TRUE)])
best.model <- which(bic.matrix == bic.matrix.smallest & bg.matrix.pass,
arr.ind = TRUE)
p.best <- best.model[1,1]
q.best <- best.model[1,2]
}
# However, if no model passes BG test, just pick the one that has lowest BIC regardless
if(is_empty(best.model)){
best.model <- which(bic.matrix == min(bic.matrix),
arr.ind = TRUE)
p.best <- best.model[1,1]
q.best <- best.model[1,2]
}
# Now run the model that was selected as best choice in the previous step
model.ardl <- ardlDlm(formula = formula.ardl,
data = df.now,
p = p.best , q = q.best)
# Compute long run coefficient
lr.numerator <-
sum(model.ardl$model$coefficients[c(paste0(impulsevar,".t"),
paste0(impulsevar,".",1:p.best))])
lr.denominator <-
(1-sum(model.ardl$model$coefficients[paste0(depvar,".",1:q.best)]))
lr.coefficient.best <- lr.numerator / lr.denominator
# Store model in output list just for future reference (make optional?)
output.ardl[["model"]][[ctry]] <- model.ardl
# Create entry in summary table of final output
sum.model.ardl <- summary(model.ardl)
this.row <- which(ardl.summary$ObsUnit == ctry)
ardl.summary[["LongRunCoefficient"]][this.row] <- lr.coefficient.best
ardl.summary[["p.best"]][this.row] <- p.best
ardl.summary[["q.best"]][this.row] <- q.best
ardl.summary[["bg.pval.best"]][this.row] <- bg.matrix[best.model]
ardl.summary[["bic.best"]][this.row] <- bic.matrix[best.model]
ardl.summary[["r2.best"]][this.row] <- sum.model.ardl$r.squared
ardl.summary[["r2.adj.best"]][this.row] <- sum.model.ardl$adj.r.squared
# Just to keep track of progress when running code:
print(paste0("Unit ",i," out of ", n.units,
" (", ctry, ")"))
i <- i+1
}
# Store complete summary table in final output list
output.ardl[["summary"]] <- ardl.summary
View(df.now)
source('C:/Users/lnlro/Dropbox/Research/COVID-19/COVID-19/code/ARDL_covariates.R', echo=TRUE)
source('C:/Users/lnlro/Dropbox/Research/COVID-19/COVID-19/code/ARDL_covariates.R', echo=TRUE)
saveRDS(object = ARDL_cov,file = "ARDL_cov_03092020.Rds")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("sjPlot")
source("ARDL_fun.R")
test <- readRDS("ARDL_cov.Rds")
getwd()
test <- readRDS("ARDL_cov_03092020.Rds")
ARDL_cov <- readRDS("ARDL_cov_03092020.Rds")
str(ARDL_cov,1)
head(ARDL_cov$summary)
ARDL_cov$summary %>%
summarise(average.p = mean(p.best),
average.q = mean(q.best))
ARDL_cov$summary$LongRunCoefficient %>% summarise(mean)
ARDL_cov$summary %>% summarise(LR_mean = mean(LongRunCoefficient))
summary(ARDL_cov$summary$LongRunCoefficient)
summary(ARDL_cov$summary$LongRunCoefficient)
df.plot<- ARDL_cov$summary %>%
mutate(ObsUnit = forcats::fct_reorder(ObsUnit,-LongRunCoefficient))
ggplot(df.plot,
aes(x = LongRunCoefficient)) +
geom_histogram() +
theme_bw()
ggplot(df.plot,
aes(x = LongRunCoefficient)) +
geom_density() +
theme_bw()
ggplot(df.plot,
aes(x = LongRunCoefficient)) +
geom_density() +
geom_histogram() +
theme_bw()
ggplot(df.plot,
aes(x = LongRunCoefficient)) +
geom_histogram() +
geom_density(color = "blue") +
theme_bw()
ggplot(df.plot,
aes(x = LongRunCoefficient)) +
geom_histogram(aes(y = ..density..), fill = "blue") +
geom_density(color = "red") +
theme_bw()
ggplot(df.plot,
aes(x = LongRunCoefficient)) +
geom_histogram(aes(y = ..density..), fill = "grey") +
geom_density(color = "red") +
theme_bw()
count(ARDL_cov$summary$LongRunCoefficient>0)
sum(ARDL_cov$summary$LongRunCoefficient>0)
Only very few coefficients are in the weird positive spectrum, to be precise `r sum(ARDL_cov$summary$LongRunCoefficient>0)`.
setwd("..")
source("ImportLong.r")
getwd()
setwd("..")
setwd("..")
getwd()
setwd("/COVID-19")
setwd("./COVID-19")
