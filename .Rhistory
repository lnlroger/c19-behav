summarise(ElectionYear=last(year),ElectionWin=last(percent1),Country.Code=first(ifs))%>%
naniar::replace_with_na_at(.vars = c("ElectionYear","ElectionWin","Country.Code"),
condition = ~.x == -999)%>%
drop_na()
#RolFluElec<-merge(RolFlu,elections,by="Country.Code",all=T)%>%
# mutate(Country=Country.x)
# dplyr::select(Country,percent1)
social_prefs<-read.csv("socialprefs.csv")%>%
rename(Country=country)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',"USA"="US",
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
df<-merge(merge(merge(merge(merge(merge(merge(
mobility,
DaysLock,by="Country",all=T),
wvs,by="Country",all=T),
weather,by="Country",all=T),
gdp,by="Country",all=T),
elections,by="Country",all=T),
rol,by="Country",all=T),
social_prefs,by="Country",all=T)
df$Mobility<-rowMeans(df[,c("Retail...recreation","Grocery...pharmacy","Parks","Transit.stations",
"Workplaces","Residential")])
library(tidyr)
library(dplyr)
library(stringr)
library(lmerTest)
library(stargazer)
library(ggplot2)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
#use abbreviated terms for countries
mobility <- read.csv(here::here("google_mobility_report_regions.csv"))%>%
filter(Region=="Total")%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United Kingdom'='UK',
'Viet Nam'='Vietnam'
))
#lockdown has been customised so as to take the median Province's attitude
lockdown<- read.csv(here::here("countryLockdowndates_custom.csv"))%>%
rename(Country=Country.Region)%>%
rename(DateRestriction=Date)%>%
mutate(Lock=ifelse(Type=="None","No","Yes"))%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United Kingdom'='UK',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))
#2020-01-22 is the date from which the covid dataset starts counting
days_death<-read.csv("CovidDeaths.csv")%>%
rename(Country=location)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))
days_1case<-days_death[days_death$new_cases==1,]%>%
group_by(Country)%>%
summarise(Date_1Confirmed=first(date))
days_1death<-days_death[days_death$new_deaths==1,]%>%
group_by(Country)%>%
summarise(Date_1Death=first(date))
time<-merge(merge(
days_death,
days_1case,by="Country",all=T),
days_1death,by="Country",all=T)
time_short<-time%>%
group_by(Country)%>%
summarise(Date_1confirmed=first(Date_1Confirmed),Date_1death=first(Date_1Death),
TotalCases=last(total_cases),TotalDeaths=last(total_deaths))
DaysLock<-merge(lockdown,time_short,by="Country",all=T)%>%
mutate(DateRestriction=as.Date(DateRestriction,format="%d/%m/%Y"))%>%
mutate(DaysDuration=ifelse(Type=="None",0,as.Date("29/03/2020",format="%d/%m/%y")-as.Date(DateRestriction)))%>%
mutate(DaysRestrictionStart=DateRestriction-as.Date("22/01/2020",format="%d/%m/%Y"))%>%
mutate(Days_Movement_1case=as.Date("29/03/2020",format="%d/%m/%y")-as.Date(Date_1confirmed,format="%d/%m/%y"))%>%
mutate(Days_Movement_1death=as.Date("29/03/2020",format="%d/%m/%y")-as.Date(Date_1death,format="%d/%m/%y"))
weather<-read.csv("covid_dataset.csv")%>%
rename(Country=Country.Region)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
group_by(Country)%>%
summarise(Temperature=mean(temperature,na.rm=TRUE),Humidity=mean(humidity,na.rm=T),Age=first(medianage),
Health_exp_pc=first(health_exp_pc),Hospibed=first(hospibed),Density=first(density),Population=first(pop))%>%
naniar::replace_with_na_at(.vars = c("Age","Health_exp_pc","Hospibed"),
condition = ~.x == -999)
#write.csv(Time,"Time.csv")
wvs<-read.csv(here::here("WVS_per_Country.csv"))%>%
#filter(Wave==6)%>%
dplyr::select(Country,E235,E236,E124,E229,Wave)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
rename(Democracy=E235,Democraticness=E236,Civil=E124,Opression=E229)%>%
group_by(Country)%>%
filter(Wave==max(Wave)) #I keep the values for each country with the most recent available wave
rol<-read.csv(here::here("RuleOfLaw2018.csv"))%>%
mutate(Country=Country.Name,ROL=as.numeric(levels(X2018..YR2018.))[X2018..YR2018.])%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
dplyr::select(Country,Country.Code,ROL)%>%
mutate(Country.Code=recode_factor(Country.Code,
'ROM'="ROU"))
#flu<-read.csv("influenza-vaccination-rates.csv")%>%
#group_by(Country.Code)%>%
#summarise(Time=last(time),VaccinationRate=last(value))%>%
#mutate(OECE=1)
#RolFlu<-merge(rol,flu,by="Country.Code",all=T)
#countries<-read.csv(here::here("Countries.csv"))%>%
#mutate(Country=trimws(Country))%>%
# mutate(Population:Service=as.numberic(Population:Service))
gdp<-read.csv("GDP.csv")%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
group_by(Country)%>%
dplyr::select(Country.Code,X2018)%>%
mutate(log_GDP_pc=log(X2018))
elections<-read.csv("DPI2017_basefile_Jan2018.csv")%>%
mutate(Country=Ã¯..countryname)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',"USA"="US",
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
#mutate(ifs="Country.Code")%>%
arrange(Country,year)%>%
group_by(Country)%>%
summarise(ElectionYear=last(year),ElectionWin=last(percent1),Country.Code=first(ifs))%>%
naniar::replace_with_na_at(.vars = c("ElectionYear","ElectionWin","Country.Code"),
condition = ~.x == -999)%>%
drop_na()
#RolFluElec<-merge(RolFlu,elections,by="Country.Code",all=T)%>%
# mutate(Country=Country.x)
# dplyr::select(Country,percent1)
social_prefs<-read.csv("socialprefs.csv")%>%
rename(Country=country)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',"USA"="US",
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
df<-merge(merge(merge(merge(merge(merge(merge(
mobility,
DaysLock,by="Country",all=T),
wvs,by="Country",all=T),
weather,by="Country",all=T),
gdp,by="Country",all=T),
elections,by="Country",all=T),
rol,by="Country",all=T),
social_prefs,by="Country",all=T)
df$Mobility<-rowMeans(df[,c("Retail...recreation","Grocery...pharmacy","Parks","Transit.stations",
"Workplaces","Residential")])
df<-read.csv("14042020.csv")
df<-read.csv(here::here("14042020.csv"))
library(tidyr)
library(dplyr)
library(stringr)
library(lmerTest)
library(stargazer)
library(ggplot2)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
options("jtools-digits" = 4,scipen=999) # set displayed decimal places to 4
df<-read.csv(here::here("14042020.csv"))
library(tidyr)
library(dplyr)
library(stringr)
library(lmerTest)
library(stargazer)
library(ggplot2)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
options("jtools-digits" = 4,scipen=999) # set displayed decimal places to 4
df<-read.csv(here::here("14042020.csv"))
library(tidyr)
library(dplyr)
library(stringr)
library(lmerTest)
library(stargazer)
library(ggplot2)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
library(ggpubr)
library(countrycode)
library(lubridate)
library(here)
library(Hmisc)
library(ggpubr)
library(ggpubr)
devtools::install_github("kassambara/ggpubr")
install.packages("rlang")
devtools::install_github("kassambara/ggpubr")
?lme4
devtools::install_github("kassambara/ggpubr")
?glue
??glue
setwd("C:/Users/fores/OneDrive - The University of Nottingham/GitHub/COVID-19")
library(plyr)
library(plyr)
library(tidyverse)
library(stringr)
library(lmerTest)
library(stargazer)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
library(ggpubr)
library(lubridate)
options("jtools-digits" = 4,scipen=999) # set displayed decimal places to 4
rm(list = ls())
source("ImportLong.r")
#Break up w1 by country, then fit specified model to each piec and return a list
models<-dlply(df,'Country',function(df)
lm(Movement~StringencyIndex,data=df))
df2<-df%>%
filter(!is.na(StringencyIndex),!is.na(Movement))
#Break up w1 by country, then fit specified model to each piec and return a list
models<-dlply(df2,'Country',function(df)
lm(Movement~StringencyIndex,data=df))
#apply coef to each model and return a data frame
q<-ldply(models,coef)
names(q)<-c("Country","Intercept","Compliance")
q
df_avg<-df%>%
filter(!is.na(Movement),!is.na(StringencyIndex))%>%
group_by(Country)%>%
summarise_at(vars(-c(total_deaths,total_cases)),mean,na.rn=TRUE)%>%
ungroup()
df_other<-df%>%
filter(!is.na(Movement),!is.na(StringencyIndex))%>%
group_by(Country)%>%
summarise(total_deaths=last(total_deaths),total_cases=last(total_cases),LogDeath=(log(last(total_deaths)+1)),LogCases=log(last(total_cases)+1),MaxSI=max(StringencyIndex,na.rm=TRUE))%>%
ungroup()
df_short<-merge(df_avg,df_other,by="Country",all=T)
df_short<-merge(df_short,q,by="Country",all=T)
#Focusing on the first wave only
w1<-df%>%
filter(!is.na(StringencyIndex),!is.na(Movement))%>%
group_by(Country)%>%
mutate(day=row_number())%>%  ###Putting a counter for each row of each group
add_tally()%>% ## creating a variable "n" that counts how many rows each group has.
arrange(Date)%>%
mutate(wave1=if_else(StringencyIndex>=dplyr::lag(StringencyIndex),1,0))%>%
mutate(fir=match(0,wave1)-1)%>% ### first occurence of a 0-value - 1 to discard the 0.
mutate(fir=tidyr::replace_na(fir,n()))%>% ### countries that never had a 0 appear as NA. We replace NAs with total rows of 1's
mutate(wave=ifelse(day<=fir,"first","second"))%>%
filter(wave=="first")%>%
ungroup()%>%
arrange(Country,Date)
#Break up w1 by country, then fit specified model to each piec and return a list
models2<-dlply(w1,'Country',function(df)
lm(Movement~StringencyIndex,data=df))
#apply coef to each model and return a data frame
wq<-ldply(models2,coef)
names(wq)<-c("Country","Intercept","Compliance")
wq
w1_avg<-w1%>%
filter(!is.na(Movement),!is.na(StringencyIndex))%>%
group_by(Country)%>%
dplyr::summarise_at(vars(-c(total_deaths,total_cases)),mean,na.rn=TRUE)%>%
ungroup()
w1_other<-w1%>%
filter(!is.na(Movement),!is.na(StringencyIndex))%>%
group_by(Country)%>%
dplyr::summarise(total_deaths=last(total_deaths),
total_cases=last(total_cases),
LogDeath=log(last(total_deaths)+1),
LogCases=log(last(total_cases)+1),
MaxSI=max(StringencyIndex))
w1_short<-merge(w1_avg,w1_other,by="Country",all=T)
w1_short<-merge(w1_short,wq,by="Country",all=T)
vars_basic<-c("log_GDP_pc","Unemployment","Pop_Density_sq_mi","Age_65up","Death_disease")
vars_briq<-c("risktaking","patience","negrecip","trust","posrecip","altruism")
vars_hof<-c("COL","PDI","MAS","UAI")
df_short%>%
filter(!is.na(Movement),!is.na(StringencyIndex))%>%
#mutate(Country=as.factor(Country))%>%
#group_by(Country)%>%
mutate(Country = forcats::fct_reorder(Country,-Movement)) %>%
ggplot()+
geom_point(aes(x=Country,y=Movement),colour="blue")+
coord_flip()+
#geom_vline(xintercept=0,colour="black")+
# scale_y_discrete()+
#scale_x_discrete()+
labs(x = 'Countries',y = "Average Movement")+
theme_bw()
basic<-formula(paste("Movement ~", paste(vars_basic, sep = "", collapse = "+")))
basic_mob<-lm(data=df_short,basic)
briq<-formula(paste("Movement ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
hof<-formula(paste("Movement ~", paste(c(vars_basic,vars_briq,"ROL",vars_hof), sep = "", collapse = "+")))
hof_mob<-lm(data=df_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
basic_mob<-lm(data=w1_short,basic)
briq_mob<-lm(data=w1_short,briq)
hof_mob<-lm(data=w1_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
basic<-formula(paste("Movement ~", paste(vars_basic, sep = "", collapse = "+")))
basic_mob<-lm(data=df_short,basic)
briq<-formula(paste("Movement ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
hof<-formula(paste("Movement ~", paste(c(vars_basic,vars_briq,"ROL",vars_hof), sep = "", collapse = "+")))
hof_mob<-lm(data=df_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
basic_mob<-lm(data=w1_short,basic)
briq_mob<-lm(data=w1_short,briq)
hof_mob<-lm(data=w1_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
basic<-formula(paste("Movement ~", paste(vars_basic, sep = "", collapse = "+")))
basic_mob<-lm(data=df_short,basic)
briq<-formula(paste("Movement ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
hof<-formula(paste("Movement ~", paste(c(vars_basic,vars_briq,"ROL",vars_hof), sep = "", collapse = "+")))
hof_mob<-lm(data=df_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
basic<-formula(paste("StringencyIndex ~", paste(vars_basic, sep = "", collapse = "+")))
basic_mob<-lm(data=df_short,basic)
briq<-formula(paste("StringencyIndex ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
hof<-formula(paste("StringencyIndex ~", paste(c(vars_basic,vars_briq,"ROL",vars_hof), sep = "", collapse = "+")))
hof_mob<-lm(data=df_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
basic<-formula(paste("LongRunCoeff_3 ~", paste(vars_basic, sep = "", collapse = "+")))
basic_mob<-lm(data=df_short,basic)
briq<-formula(paste("LongRunCoeff_3 ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
hof<-formula(paste("LongRunCoeff_3 ~", paste(c(vars_basic,vars_briq,"ROL",vars_hof), sep = "", collapse = "+")))
hof_mob<-lm(data=df_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
df%>%
mutate(Date=as.Date(Date))%>%
mutate(label = if_else(Date == max(Date,na.rm=T) & total_deaths>10000, as.character(Country), NA_character_)) %>%
#filter(TotalDeaths>1000,Date>as.Date("01/03/2020",format="%d/%m/%y"))%>%
group_by(Country)%>%
ggplot(aes(x = Date, y = total_deaths,group=Country, color=Country)) +
geom_line(size=1) +
#scale_colour_brewer(palette = 'Set1')+
#guides(colour="legend")
scale_color_discrete(guide = FALSE)+
theme_minimal()+
theme(text = element_text(size=15))+
geom_label_repel(aes(label = label),
nudge_x = 1,
na.rm = TRUE)
df%>%
mutate(Date=as.Date(Date))%>%
mutate(label = if_else(Date == max(Date,na.rm=T) & total_deaths_per_million>200, as.character(Country), NA_character_)) %>%
#filter(TotalDeaths>1000,Date>as.Date("01/03/2020",format="%d/%m/%y"))%>%
group_by(Country)%>%
ggplot(aes(x = Date, y = total_deaths_per_million,group=Country, color=Country)) +
geom_line(size=1) +
#scale_colour_brewer(palette = 'Set1')+
#guides(colour="legend")
scale_color_discrete(guide = FALSE)+
theme_minimal()+
theme(text = element_text(size=15))+
geom_label_repel(aes(label = label),
nudge_x = 1,
na.rm = TRUE)
basic<-formula(paste("LogDeath ~", paste(vars_basic, sep = "", collapse = "+")))
basic_mob<-lm(data=df_short,basic)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
hof<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL",vars_hof), sep = "", collapse = "+")))
hof_mob<-lm(data=df_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
basic<-formula(paste("LogCases ~", paste(vars_basic, sep = "", collapse = "+")))
basic_mob<-lm(data=df_short,basic)
briq<-formula(paste("LogCases ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
hof<-formula(paste("LogCases ~", paste(c(vars_basic,vars_briq,"ROL",vars_hof), sep = "", collapse = "+")))
hof_mob<-lm(data=df_short,hof)
tab_model(basic_mob,briq_mob,hof_mob)
tab_model(lm(data=df_short,LogDeath~Movement))
tab_model(lm(data=df_short,LogCases~Movement))
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","Movement"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
briq<-formula(paste("LogCases ~", paste(c(vars_basic,vars_briq,"ROL","Movement"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","Movement"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
tab_model(lm(data=df_short,LogDeath~LongRunCoeff_3))
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","LongRunCoeff_3"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
tab_model(lm(data=df_short,LogDeath~SimpleCoef))
tab_model(lm(data=df_short,LogDeath~Compliance))
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","SimpleCoef"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","Compliance"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
tab_model(lm(data=w1_short,LogDeath~Movement))
tab_model(lm(data=df_short,LogDeath~Movement))
tab_model(lm(data=w1_short,LogDeath~Movement))
tab_model(lm(data=df_short,LogDeath~Movement))
tab_model(lm(data=w1_short,LogDeath~Compliance))
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,"ROL","Compliance"), sep = "", collapse = "+")))
briq_mob<-lm(data=w1_short,briq)
tab_model(briq_mob)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","Movement","StringencyIndex"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","StringencyIndex"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","Movement"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
briq_NoMove<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL"), sep = "", collapse = "+")))
briq_mob_NoMove<-lm(data=df_short,briq_NoMove)
tab_model(briq_mob)
tab_model(briq_mob_NoMove)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","Movement"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
briq_SI<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","Movement","StringencyIndex"), sep = "", collapse = "+")))
briq_mob_SI<-lm(data=df_short,briq)
tab_model(briq_mob_NoMove,briq_mob,briq_mob_SI)
briq_SI<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","Movement","StringencyIndex"), sep = "", collapse = "+")))
briq_mob_SI<-lm(data=df_short,briq)
tab_model(briq_mob_NoMove,briq_mob,briq_mob_SI)
briq_mob_SI<-lm(data=df_short,briq_SI)
tab_model(briq_mob_NoMove,briq_mob,briq_mob_SI)
briq<-formula(paste("LogDeath ~", paste(c(vars_basic,vars_briq,"ROL","LongRunCoeff_3"), sep = "", collapse = "+")))
briq_mob<-lm(data=df_short,briq)
tab_model(briq_mob)
