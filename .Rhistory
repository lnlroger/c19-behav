mutate(Price=as.numeric(trimws(Price)))%>%
mutate(Number=as.numeric(Number.of.ratings.by.user))%>%
mutate(Over50=as.factor(ifelse(Price>50,"Over50E","Under50E")))%>%
mutate(OverMed=as.factor(ifelse(Price>median(Price,na.rm=T),"OverMedian","UnderMedian")))%>%
mutate(Date=as.Date(Date,format='%B %d, %Y'))%>%
rename(Vintage=Year)%>%
mutate(Year=as.Date(ISOdate(Vintage,1,1)))%>%
mutate(JL_Rank=dense_rank(desc(Vintage_qty)))%>%
mutate(zRating=scale(Rating))%>%
mutate(month=floor_date(Date, "month"))%>%
filter(Year<Date)%>%
group_by(Rater)%>%
mutate(NumberHigh=max(Number),NumberLow=min(Number),dif=NumberHigh-NumberLow,BordRev=n())%>%
arrange(-dif)%>%
ungroup()
summary(viv$OverMed)
viv<-readRDS("Vivino.rds")%>%
# filter(!is.na(Price))%>%
mutate(Rating=as.numeric(Rating))%>%
mutate(Price=gsub("\\€", "", Price))%>%
mutate(Price=as.numeric(trimws(Price)))%>%
mutate(Number=as.numeric(Number.of.ratings.by.user))%>%
mutate(Over50=as.factor(ifelse(Price>50,"Over50E","Under50E")))%>%
mutate(OverMed=as.factor(ifelse(Price>median(Price,na.rm=T),"OverMedian","UnderMedian")))%>%
mutate(Date=as.Date(Date,format='%B %d, %Y'))%>%
rename(Vintage=Year)%>%
mutate(Year=as.Date(ISOdate(Vintage,1,1)))%>%
mutate(JL_Rank=dense_rank(desc(Vintage_qty)))%>%
mutate(zRating=scale(Rating))%>%
mutate(month=floor_date(Date, "month"))%>%
filter(Year<Date)%>%
group_by(Rater)%>%
mutate(NumberHigh=max(Number),NumberLow=min(Number),dif=NumberHigh-NumberLow,BordRev=n())%>%
arrange(-dif)%>%
ungroup()%>%
mutate(Expert=as.factor(ifelse(Number>summary(Number)[5],"Expert","Non-Expert")))%>%
mutate(RevLgt=nchar(Review))
summary(viv$OverMed)
viv<-readRDS("Vivino.rds")%>%
# filter(!is.na(Price))%>%
mutate(Rating=as.numeric(Rating))%>%
mutate(Price=gsub("\\€", "", Price))%>%
mutate(Price=as.numeric(trimws(Price)))%>%
mutate(Number=as.numeric(Number.of.ratings.by.user))%>%
mutate(Over50=as.factor(ifelse(Price>50,"Over50E","Under50E")))%>%
mutate(OverMed=as.factor(ifelse(Price>median(Price,na.rm=T),"OverMedian","UnderMedian")))%>%
mutate(Date=as.Date(Date,format='%B %d, %Y'))%>%
rename(Vintage=Year)%>%
mutate(Year=as.Date(ISOdate(Vintage,1,1)))%>%
mutate(JL_Rank=dense_rank(desc(Vintage_qty)))%>%
mutate(zRating=scale(Rating))%>%
mutate(month=floor_date(Date, "month"))%>%
filter(Year<Date)%>%
group_by(Rater)%>%
mutate(NumberHigh=max(Number),NumberLow=min(Number),dif=NumberHigh-NumberLow,BordRev=n())%>%
arrange(-dif)%>%
ungroup()%>%
mutate(Expert=as.factor(ifelse(Number>summary(Number)[5],"Expert","Non-Expert")))%>%
mutate(RevLgt=nchar(Review))
summary(viv$OverMed)
summary(viv$Over50)
source("ImportData.r")
summary(viv$Over50)
viv<-readRDS("Vivino.rds")%>%
# filter(!is.na(Price))%>%
mutate(Rating=as.numeric(Rating))%>%
mutate(Price=gsub("\\€", "", Price))%>%
mutate(Price=as.numeric(trimws(Price)))%>%
mutate(Number=as.numeric(Number.of.ratings.by.user))%>%
mutate(Over50=as.factor(ifelse(Price>50,"Over50E","Under50E")))%>%
mutate(OverMed=as.factor(ifelse(Price>median(Price,na.rm=T),"OverMedian","UnderMedian")))
summary(viv$Over50)
viv<-readRDS("Vivino.rds")%>%
# filter(!is.na(Price))%>%
mutate(Rating=as.numeric(Rating))%>%
mutate(Price=gsub("\\€", "", Price))%>%
mutate(Price=as.numeric(trimws(Price)))%>%
mutate(Number=as.numeric(Number.of.ratings.by.user))%>%
mutate(Over50=as.factor(ifelse(Price>50,"Over50E","Under50E")))%>%
mutate(OverMed=as.factor(ifelse(Price>median(Price,na.rm=T),"OverMedian","UnderMedian")))%>%
mutate(Date=as.Date(Date,format='%B %d, %Y'))%>%
rename(Vintage=Year)%>%
mutate(Year=as.Date(ISOdate(Vintage,1,1)))%>%
mutate(JL_Rank=dense_rank(desc(Vintage_qty)))%>%
mutate(zRating=scale(Rating))%>%
mutate(month=floor_date(Date, "month"))%>%
filter(Year<Date)%>%
group_by(Rater)%>%
mutate(NumberHigh=max(Number),NumberLow=min(Number),dif=NumberHigh-NumberLow,BordRev=n())%>%
arrange(-dif)%>%
ungroup()%>%
mutate(Expert=as.factor(ifelse(Number>summary(Number)[5],"Expert","Non-Expert")))%>%
mutate(RevLgt=nchar(Review))
summary(viv$Over50)
source("ImportData.r")
summary(viv$Over50)
viv$Over50
viv<-readRDS("Vivino.rds")%>%
# filter(!is.na(Price))%>%
mutate(Rating=as.numeric(Rating))%>%
mutate(Price=gsub("\\€", "", Price))%>%
mutate(Price=as.numeric(trimws(Price)))%>%
mutate(Number=as.numeric(Number.of.ratings.by.user))%>%
mutate(Over50=as.factor(ifelse(Price>50,"Over50E","Under50E")))%>%
mutate(OverMed=as.factor(ifelse(Price>median(Price,na.rm=T),"OverMedian","UnderMedian")))%>%
mutate(Date=as.Date(Date,format='%B %d, %Y'))%>%
rename(Vintage=Year)%>%
mutate(Year=as.Date(ISOdate(Vintage,1,1)))%>%
mutate(JL_Rank=dense_rank(desc(Vintage_qty)))%>%
mutate(zRating=scale(Rating))%>%
mutate(month=floor_date(Date, "month"))%>%
filter(Year<Date)%>%
group_by(Rater)%>%
mutate(NumberHigh=max(Number),NumberLow=min(Number),dif=NumberHigh-NumberLow,BordRev=n())%>%
arrange(-dif)%>%
ungroup()%>%
mutate(Expert=as.factor(ifelse(Number>summary(Number)[5],"Expert","Non-Expert")))%>%
mutate(RevLgt=nchar(Review))
viv$Over50
summary(viv$Over50)
source("ImportData.r")
summary(viv$Over50)
source("ImportData.r")
summary(viv$Over50)
viv<-readRDS("Vivino.rds")
viv$Price[1]
viv<-readRDS("Vivino.rds")%>%
# filter(!is.na(Price))%>%
mutate(Rating=as.numeric(Rating))%>%
mutate(Price=gsub("\\???", "", Price))%>%
mutate(Price=as.numeric(trimws(Price)))
viv<-readRDS("Vivino.rds")%>%
# filter(!is.na(Price))%>%
mutate(Rating=as.numeric(Rating))%>%
mutate(Price=gsub("\\€", "", Price))%>%
mutate(Price=as.numeric(trimws(Price)))
df$Price
viv$Price
write_rds(viv,"Vivino.rds")
source("ImportData.r")
source("ImportData.r")
summary(viv$Over50)
class(viv$Year)
class(viv$Vintage)
viv$Date[1]
viv$Date[2]
viv$month
df%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))
viv$Vintage
df%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))
viv%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))
viv%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared")
viv%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)
viv%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
mutate(R=map_dbl("r.squared"))
viv%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared"))
viv%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared")
summary(lm(data=viv,Price~month)[1]
summary(lm(data=viv,Price~month))[1]
summary(lm(data=viv,Price~month))[2]
summary(lm(data=viv,Price~month))[[2]]
summary(lm(data=viv,Price~month))[[5]]
summary(lm(data=viv,Price~month))[[4]]
viv%>%
group_by(Vintage,OverMed)%>%
mutate(n=n(),num=seq(1:n))%>%
summarise(coef=summary(lm(zScore~num))$coefficients[2,1],
se=summary(lm(zScore~num))$coefficients[2,2],
t_stat=coef/se,
Avg_zScore=mean(zScore))
viv%>%
group_by(Vintage,OverMed)%>%
mutate(n=n(),num=seq(1:n))%>%
summarise(coef=summary(lm(Price~num))$coefficients[2,1],
se=summary(lm(Price~num))$coefficients[2,2],
t_stat=coef/se,
Avg_zScore=mean(zScore))
viv%>%
group_by(Vintage)%>%
mutate(n=n(),num=seq(1:n))%>%
summarise(coef=summary(lm(Price~num))$coefficients[2,1],
se=summary(lm(Price~num))$coefficients[2,2],
t_stat=coef/se,
Avg_zScore=mean(zScore))
viv%>%
group_by(Vintage)%>%
mutate(n=n(),num=seq(1:n))%>%
summarise(coef=summary(lm(Price~num))$coefficients[2,1],
se=summary(lm(Price~num))$coefficients[2,2],
t_stat=coef/se)
warnings()
viv%>%
group_by(Vintage)%>%
mutate(n=n(),num=seq(1:n))
q<-viv%>%
group_by(Vintage)%>%
mutate(n=n(),num=seq(1:n))
View(q)
View(q)
q<-viv%>%
group_by(Vintage)%>%
mutate(n=n(),num=seq(1:n))%>%
arrange(Vintage,num)
View(q)
q<-viv%>%
arrange(Date)%>%
group_by(Vintage)%>%
mutate(n=n(),num=seq(1:n))%>%
arrange(Vintage,num) %>%
summarise(coef=summary(lm(Price~num))$coefficients[2,1],
se=summary(lm(Price~num))$coefficients[2,2],
t_stat=coef/se)
View(q)
viv%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)
viv%>%
mutate(Vintage=as.character(Vintage))%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared")
viv%>%
mutate(Vintage=as.character(Vintage))%>%
arrange(Vintage,month)%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared")
summary(data=viv,lm(Price~month))$coefficients[2,1]
viv$Price
summary(viv,lm(Price~month))$coefficients[2,1]
summary(lm(viv$Price~viv$month))$coefficients[2,1]
summary(lm(viv$Price~viv$month))$coefficients[2,]
summary(lm(viv$Price~viv$month))$r.squared
viv%>%
arrange(Vintagemmonth)%>%
group_by(Vintage)%>%
mutate(n=n(),num=seq(1:n))%>%
arrange(Vintage,num) %>%
summarise(coef=summary(lm(Price~month))$r.squared)
viv%>%
arrange(Vintage,month)%>%
group_by(Vintage)%>%
mutate(n=n(),num=seq(1:n))%>%
arrange(Vintage,num) %>%
summarise(coef=summary(lm(Price~month))$r.squared)
viv%>%
mutate(Vintage=as.character(Vintage))%>%
arrange(Vintage,month)%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared")
viv%>%
arrange(Vintage,month)%>%
group_by(Vintage)%>%
arrange(Vintage,num) %>%
summarise(coef=summary(lm(Price~month))$r.squared)
viv%>%
arrange(Vintage,month)%>%
group_by(Vintage)%>%
summarise(coef=summary(lm(Price~month))$r.squared)
viv%>%
arrange(Vintage,month)%>%
group_by(Vintage)%>%
mutate(coef=summary(lm(Price~month))$r.squared)
viv%>%
arrange(Vintage,month)%>%
group_by(Vintage)%>%
summarise(coef=summary(lm(Price~month))$r.squared)
viv%>%
mutate(Vintage=as.character(Vintage))%>%
arrange(Vintage,month)%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared")
viv%>%
#mutate(Vintage=as.character(Vintage))%>%
arrange(Vintage,month)%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared")
viv%>%
#arrange(Vintage,month)%>%
split(.$Vintage)%>%
map(~lm(Price~month,data=.))%>%
map(summary)%>%
map_dbl("r.squared")
viv%>%
arrange(Vintage,month)%>%
group_by(Vintage)%>%
summarise(coef=summary(lm(Price~month))$r.squared)
str(viv)
str(q)
setwd("C:/Users/fores/OneDrive - The University of Nottingham/GitHub/COVID-19")
library("tidyverse")
library("countrycode")
`%notin%` <- Negate(`%in%`) # Defines logical operator "not in" for use below
# Import google mobility data ----
source("Google/import_mobility.R")
# Lockdown dates ----
source("LockDown/import_lockdown.R")
# Cases and Deaths ----
source("CasesDeaths/import_cases_deaths.R")
# Weather data ----
source("Weather/import_weather.R")
# World Value Survey ----
source("WVS/import_wvs.R")
# World Bank data (Rule of Law, Communicable diseases, hospital beds among others) ----
source("WB/import_wb.R")
# PolityIV index ----
source("Politics/import_polityIV.R")
# UN population data ----
source("UN-Population/import_unpop.R")
# Elections ----
source("Politics/import_dpi.R")
# Social preferences ----
source("Briq/import_social-prefs.R")
# Basic country co-variates (source?) ----
source("Countries/import_covariates.R")
# Collectivism - Hofstede ----
source("Collectivism/import_collectivism.R")
# Gelfand data (Government efficiency) ----
source("Government_Gelfand/import_gelfand.R")
# Previous epidemics ----
source("EM-DAT/import_epidemics.R")
# Merge into single dataframes ----
# Short version (pure cross-section)
source("OxfordTracking/covid-policy-tracker-master/data/import_OxCGRT.R")
datasets.to.merge.short <- list(mobility_short,
DaysLock_short,
wvs,
weather_short,
wb,
elections,
rol,
social_prefs,
countries,
polityIV,
UNpop,
hf,
Gf_gov
)
df_short <- Reduce(function(...) full_join(..., by='Country'), datasets.to.merge.short) %>%
filter(!is.na(Country)) %>%
mutate(Death_pc = TotalDeaths/Population) %>%
mutate(Death_pc = TotalDeaths/Population) %>%
mutate(Confirmed_pc = TotalCases/Population) %>%
filter(Province != "Faroe Islands") %>%
mutate(Log_Death_pc = ifelse(Death_pc>0,log(Death_pc),NA)) %>%
mutate(Google_pc = Google/Population) %>%
mutate(Log_Google_pc = ifelse(Google_pc>0,log(Google_pc),NA)) %>%
mutate(DateLockDown=as.Date(DateLockDown,format="%d/%m/%Y"))%>%
mutate(Date=as.Date(Date))
write.csv(df_short,"df_covid_short.csv")
# Long version (daily data)
datasets.to.merge.long <- list(mobility_weather_death,
lockdown,
wvs,
wb,
elections,
rol,
social_prefs,
countries,
time_short,
polityIV,
UNpop,
hf,
Gf_gov
)
df_long<- Reduce(function(...) full_join(..., by=c('Country')), datasets.to.merge.long) %>%
filter(!is.na(Country)) %>%
mutate(Death_pc = total_deaths/Population) %>%
mutate(Confirmed_pc = total_cases/Population) %>%
filter(Province != "Faroe Islands") %>%
mutate(Log_Death_pc = ifelse(Death_pc>0,log(Death_pc),NA)) %>%
mutate(Google_pc = DeathsBeforeGoogle/Population) %>%
mutate(Log_Google_pc = ifelse(Google_pc>0,log(Google_pc),NA)) %>%
mutate(DateLockDown = DateLockDown.y)
df_long<-merge(df_long,Ox,by=c("Country","Date"),all=T)
write.csv(df_long,"df_covid_long.csv")
setwd("C:/Users/fores/OneDrive - The University of Nottingham/GitHub/COVID-19/OxfordTracking/covid-policy-tracker-master/code")
setwd("C:/Users/fores/OneDrive - The University of Nottingham/GitHub/COVID-19")
df<-read.csv("df_covid_long.csv")
write_rds(df_long,"df_covid_long.rds")
df$country_region[1]
df$country_region[2]]
df$country_region[2]
df$country_region
df$sub_region_1
df$sub_region_2
View(df)
df<-readRDS("df_covid_long.rds")%>%
filter(sub_region_1=="")
df$Continent
df$Google
basic<-c("Date","Country","Continent")
covid<-c("total_cases", "new_cases", "total_deaths", "new_deaths")
economy<-c("Gini","GDP.capita",)
behavioural<-c("COL","ROL","patience","risktaking","altruism","trust","MAS","UAI","LTO")
OxVars<-c('C1_School.closing', 'C1_Flag', 'C2_Workplace.closing','C2_Flag','C3_Cancel.public.events','C3_Flag','C4_Restrictions.on.gatherings','C4_Flag','C5_Close.public.transport','C6_Stay.at.home.requirements','C6_Flag','C7_Restrictions.on.internal.movement','C7_Flag,C8_International.travel.controls','H1_Public.information.campaigns','H1_Flag')
GoogleVars<-c('retail_and_recreation_percent_change_from_baseline', 'grocery_and_pharmacy_percent_change_from_baseline', 'parks_percent_change_from_baseline', 'transit_stations_percent_change_from_baseline', 'workplaces_percent_change_from_baseline','residential_percent_change_from_baseline','Movement')
q<-df%>%dplyr::select(OxVars,GoogleVars,basic)
q<-df%>%dplyr::select(basic)
q<-df%>%dplyr::select(OxVars)
q<-df%>%dplyr::select(GoogleVars)
df_short<-df%>%
dplyr::select(all_of(basic,GoogleVars))
df_short<-df%>%
dplyr::select(all_of(c(basic,GoogleVars)))
df2<-df%>%
dplyr::select(all_of(c(basic,GoogleVars)),C1_School.closing:H1_Public.information.campaigns)
source("ImportLong.r")
df2<-df%>%
dplyr::select(all_of(c(basic,GoogleVars,behavioural,covid,economy,Policy)))
Policy<-c("IndexCoronaNet")
df2<-df%>%
dplyr::select(all_of(c(basic,GoogleVars,behavioural,covid,economy,Policy)))
Policy<-c("StringencyIndex")
df2<-df%>%
dplyr::select(all_of(c(basic,GoogleVars,behavioural,covid,economy,Policy)))
cor(df2,use="complete.obs")
df3<-df2%>%
dplyr::select_if(numeric)
df3<-df2%>%
dplyr::select_if(is.numeric)
cor(df3,use="complete.obs")
c<-cor(df3,use="complete.obs")
View(c)
?cor
c<-cor(df3,use="pairwise.complete.obs")
c
View(c)
cor.test(df$StringencyIndex,df$ROL)
cor.test(df$StringencyIndex,df$ROL)
cor.test(df$StringencyIndex,df$COL)
df_short<-df%>%
group_by(Country)%>%
summarise_all(mean)
View(df_short)
df_short<-df2%>%
group_by(Country)%>%
summarise_all(mean)
View(df_short)
class(df$StringencyIndex)
View(df2)
df_short<-df2%>%
group_by(Country)%>%
summarise_all(mean,na.rm=TRUE)
View(df_short)
c2<-cor(df_short,use="pairwise.complete.obs")
df_short<-df2%>%
group_by(Country)%>%
summarise_all(mean,na.rm=TRUE)
c2<-cor(df_short,use="pairwise.complete.obs")
View(df2)
df_short2<-df_short%>%
dplyr::select_if(is.numeric)
c2<-cor(df_short2,use="pairwise.complete.obs")
View(c2)
df_short<-df2%>%
group_by(Country)%>%
summarise_all(last,na.rm=TRUE)
df_short2<-df_short%>%
dplyr::select_if(is.numeric)
c2<-cor(df_short2,use="pairwise.complete.obs")
View(c2)
View(df_short)
cor.test(df$StringencyIndex,df$COL)
cor.test(df$StringencyIndex,df$UAI)
cor.test(df$StringencyIndex,df$GDP_pc)
cor.test(df$StringencyIndex,df$COL)
cor.test(df$StringencyIndex,df$risktaking)
cor.test(df$StringencyIndex,df$trust)
cor.test(df$StringencyIndex,df$LTO)
cor.test(df$StringencyIndex,df$Movement)
