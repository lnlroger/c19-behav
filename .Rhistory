'ROM'="ROU"))
#flu<-read.csv("influenza-vaccination-rates.csv")%>%
#group_by(Country.Code)%>%
#summarise(Time=last(time),VaccinationRate=last(value))%>%
#mutate(OECE=1)
#RolFlu<-merge(rol,flu,by="Country.Code",all=T)
#countries<-read.csv(here::here("Countries.csv"))%>%
#mutate(Country=trimws(Country))%>%
# mutate(Population:Service=as.numberic(Population:Service))
gdp<-read.csv("GDP.csv")%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
group_by(Country)%>%
dplyr::select(Country.Code,X2018)%>%
mutate(log_GDP_pc=log(X2018))
elections<-read.csv("DPI2017_basefile_Jan2018.csv")%>%
mutate(Country=ï..countryname)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',"USA"="US",
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
#mutate(ifs="Country.Code")%>%
arrange(Country,year)%>%
group_by(Country)%>%
summarise(ElectionYear=last(year),ElectionWin=last(percent1),Country.Code=first(ifs))%>%
naniar::replace_with_na_at(.vars = c("ElectionYear","ElectionWin","Country.Code"),
condition = ~.x == -999)%>%
drop_na()
#RolFluElec<-merge(RolFlu,elections,by="Country.Code",all=T)%>%
# mutate(Country=Country.x)
# dplyr::select(Country,percent1)
social_prefs<-read.csv("socialprefs.csv")%>%
rename(Country=country)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',"USA"="US",
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
df<-merge(merge(merge(merge(merge(merge(merge(
mobility,
DaysLock,by="Country",all=T),
wvs,by="Country",all=T),
weather,by="Country",all=T),
gdp,by="Country",all=T),
elections,by="Country",all=T),
rol,by="Country",all=T),
social_prefs,by="Country",all=T)
df$Mobility<-rowMeans(df[,c("Retail...recreation","Grocery...pharmacy","Parks","Transit.stations",
"Workplaces","Residential")])
library(tidyr)
library(dplyr)
library(stringr)
library(lmerTest)
library(stargazer)
library(ggplot2)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
#use abbreviated terms for countries
mobility <- read.csv(here::here("google_mobility_report_regions.csv"))%>%
filter(Region=="Total")%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United Kingdom'='UK',
'Viet Nam'='Vietnam'
))
#lockdown has been customised so as to take the median Province's attitude
lockdown<- read.csv(here::here("countryLockdowndates_custom.csv"))%>%
rename(Country=Country.Region)%>%
rename(DateRestriction=Date)%>%
mutate(Lock=ifelse(Type=="None","No","Yes"))%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United Kingdom'='UK',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))
#2020-01-22 is the date from which the covid dataset starts counting
days_death<-read.csv("CovidDeaths.csv")%>%
rename(Country=location)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))
days_1case<-days_death[days_death$new_cases==1,]%>%
group_by(Country)%>%
summarise(Date_1Confirmed=first(date))
days_1death<-days_death[days_death$new_deaths==1,]%>%
group_by(Country)%>%
summarise(Date_1Death=first(date))
time<-merge(merge(
days_death,
days_1case,by="Country",all=T),
days_1death,by="Country",all=T)
time_short<-time%>%
group_by(Country)%>%
summarise(Date_1confirmed=first(Date_1Confirmed),Date_1death=first(Date_1Death),
TotalCases=last(total_cases),TotalDeaths=last(total_deaths))
DaysLock<-merge(lockdown,time_short,by="Country",all=T)%>%
mutate(DateRestriction=as.Date(DateRestriction,format="%d/%m/%Y"))%>%
mutate(DaysDuration=ifelse(Type=="None",0,as.Date("29/03/2020",format="%d/%m/%y")-as.Date(DateRestriction)))%>%
mutate(DaysRestrictionStart=DateRestriction-as.Date("22/01/2020",format="%d/%m/%Y"))%>%
mutate(Days_Movement_1case=as.Date("29/03/2020",format="%d/%m/%y")-as.Date(Date_1confirmed,format="%d/%m/%y"))%>%
mutate(Days_Movement_1death=as.Date("29/03/2020",format="%d/%m/%y")-as.Date(Date_1death,format="%d/%m/%y"))
weather<-read.csv("covid_dataset.csv")%>%
rename(Country=Country.Region)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
group_by(Country)%>%
summarise(Temperature=mean(temperature,na.rm=TRUE),Humidity=mean(humidity,na.rm=T),Age=first(medianage),
Health_exp_pc=first(health_exp_pc),Hospibed=first(hospibed),Density=first(density),Population=first(pop))%>%
naniar::replace_with_na_at(.vars = c("Age","Health_exp_pc","Hospibed"),
condition = ~.x == -999)
#write.csv(Time,"Time.csv")
wvs<-read.csv(here::here("WVS_per_Country.csv"))%>%
#filter(Wave==6)%>%
dplyr::select(Country,E235,E236,E124,E229,Wave)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
rename(Democracy=E235,Democraticness=E236,Civil=E124,Opression=E229)%>%
group_by(Country)%>%
filter(Wave==max(Wave)) #I keep the values for each country with the most recent available wave
rol<-read.csv(here::here("RuleOfLaw2018.csv"))%>%
mutate(Country=Country.Name,ROL=as.numeric(levels(X2018..YR2018.))[X2018..YR2018.])%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
dplyr::select(Country,Country.Code,ROL)%>%
mutate(Country.Code=recode_factor(Country.Code,
'ROM'="ROU"))
#flu<-read.csv("influenza-vaccination-rates.csv")%>%
#group_by(Country.Code)%>%
#summarise(Time=last(time),VaccinationRate=last(value))%>%
#mutate(OECE=1)
#RolFlu<-merge(rol,flu,by="Country.Code",all=T)
#countries<-read.csv(here::here("Countries.csv"))%>%
#mutate(Country=trimws(Country))%>%
# mutate(Population:Service=as.numberic(Population:Service))
gdp<-read.csv("GDP.csv")%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
group_by(Country)%>%
dplyr::select(Country.Code,X2018)%>%
mutate(log_GDP_pc=log(X2018))
elections<-read.csv("DPI2017_basefile_Jan2018.csv")%>%
mutate(Country=ï..countryname)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',"USA"="US",
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
#mutate(ifs="Country.Code")%>%
arrange(Country,year)%>%
group_by(Country)%>%
summarise(ElectionYear=last(year),ElectionWin=last(percent1),Country.Code=first(ifs))%>%
naniar::replace_with_na_at(.vars = c("ElectionYear","ElectionWin","Country.Code"),
condition = ~.x == -999)%>%
drop_na()
#RolFluElec<-merge(RolFlu,elections,by="Country.Code",all=T)%>%
# mutate(Country=Country.x)
# dplyr::select(Country,percent1)
social_prefs<-read.csv("socialprefs.csv")%>%
rename(Country=country)%>%
mutate(Country=recode_factor(Country,
'United States of America' = 'US','United Kingdom'='UK',
'United Arab Emirates'='UAE','Czech Republic'='Czechia',
'Bosnia and Herzegovina'='Bosnia','United States'='US',"USA"="US",
'Viet Nam'='Vietnam','Congo (Kinshasa)'='Congo'))%>%
df<-merge(merge(merge(merge(merge(merge(merge(
mobility,
DaysLock,by="Country",all=T),
wvs,by="Country",all=T),
weather,by="Country",all=T),
gdp,by="Country",all=T),
elections,by="Country",all=T),
rol,by="Country",all=T),
social_prefs,by="Country",all=T)
df$Mobility<-rowMeans(df[,c("Retail...recreation","Grocery...pharmacy","Parks","Transit.stations",
"Workplaces","Residential")])
df<-read.csv("14042020.csv")
df<-read.csv(here::here("14042020.csv"))
library(tidyr)
library(dplyr)
library(stringr)
library(lmerTest)
library(stargazer)
library(ggplot2)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
options("jtools-digits" = 4,scipen=999) # set displayed decimal places to 4
df<-read.csv(here::here("14042020.csv"))
library(tidyr)
library(dplyr)
library(stringr)
library(lmerTest)
library(stargazer)
library(ggplot2)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
options("jtools-digits" = 4,scipen=999) # set displayed decimal places to 4
df<-read.csv(here::here("14042020.csv"))
library(tidyr)
library(dplyr)
library(stringr)
library(lmerTest)
library(stargazer)
library(ggplot2)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
library(ggpubr)
library(countrycode)
library(lubridate)
library(here)
library(Hmisc)
library(ggpubr)
library(ggpubr)
devtools::install_github("kassambara/ggpubr")
install.packages("rlang")
devtools::install_github("kassambara/ggpubr")
?lme4
devtools::install_github("kassambara/ggpubr")
?glue
??glue
setwd("C:/Users/fores/OneDrive - The University of Nottingham/GitHub/COVID-19")
source("ImportLong.R")
q<-readRDS("df_covid_long.rds")
q<-readRDS("Oxf.rds")
#Files that require regular updating
## Case Death
## Google
## Oxford
library("tidyverse")
library("countrycode")
`%notin%` <- Negate(`%in%`) # Defines logical operator "not in" for use below
# Import google mobility data ----
source("Google/import_mobility.R")
# Lockdown dates ----
source("LockDown/import_lockdown.R")
# Cases and Deaths ----
source("CasesDeaths/import_cases_deaths.R")
# Weather data ----
#source("Weather/import_weather.R")
# World Value Survey ----
source("WVS/import_wvs.R")
# World Bank data (Rule of Law, Communicable diseases, hospital beds among others) ----
source("WB/import_wb.R")
# PolityIV index ----
source("Politics/import_polityIV.R")
# UN population data ----
source("UN-Population/import_unpop.R")
# Elections ----
source("Politics/import_dpi.R")
# Social preferences ----
source("Briq/import_social-prefs.R")
# Basic country co-variates (source?) ----
source("Countries/import_covariates.R")
# Collectivism - Hofstede ----
source("Collectivism/import_collectivism.R")
# Gelfand data (Government efficiency) ----
source("Government_Gelfand/import_gelfand.R")
# Previous epidemics ----
source("EM-DAT/import_epidemics.R")
# Import long run coefficients obtained from ARDL
lr.coeffs <- read_rds("compliance/LongRunCoefficients_ARDL.rds")
# Merge into single dataframes ----
# Short version (pure cross-section)
source("OxfordTracking/covid-policy-tracker-master/data/import_OxCGRT.R")
# datasets.to.merge.short <- list(mobility_short,
#                           DaysLock_short,
#                           wvs,
#                           weather_short,
#                           wb,
#                           elections,
#                           rol,
#                           social_prefs,
#                           countries,
#                           polityIV,
#                           UNpop,
#                           hf,
#                           Gf_gov,
#                           lr.coeffs
#                           )
#
# df_short <- Reduce(function(...) full_join(..., by='Country'), datasets.to.merge.short) %>%
#   filter(!is.na(Country)) %>%
#   mutate(Death_pc = TotalDeaths/Population) %>%
#   mutate(Death_pc = TotalDeaths/Population) %>%
#   mutate(Confirmed_pc = TotalCases/Population) %>%
#   filter(Province != "Faroe Islands") %>%
#   mutate(Log_Death_pc = ifelse(Death_pc>0,log(Death_pc),NA)) %>%
#   mutate(Google_pc = Google/Population) %>%
#   mutate(Log_Google_pc = ifelse(Google_pc>0,log(Google_pc),NA)) %>%
#   mutate(DateLockDown=as.Date(DateLockDown,format="%d/%m/%Y"))%>%
#   mutate(Date=as.Date(Date))
#
#
#
# write.csv(df_short,"df_covid_short.csv")
# Long version (daily data)
days_mobility_prefs<-merge(merge(mobility,days,by=c('Country','Date'),all=T),social_prefs,by='Country',all=T)
days_mobility_prefs_regional<-merge(merge(mobility_regional,days,by=c('Country','Date'),all=T),social_prefs_city,by=c('Country'),all=T)
datasets.to.merge.long <- list(#days_mobility_prefs_regional,
days_mobility_prefs,
lockdown,
wvs,
wb,
elections,
rol,
#social_prefs,
#social_prefs_city,
countries,
#time_short,
polityIV,
UNpop,
hf,
Gf_gov,
lr.coeffs
)
df_long<- Reduce(function(...) full_join(..., by=c('Country')), datasets.to.merge.long) %>%
filter(!is.na(Country)) %>%
mutate(Death_pc = total_deaths/Population) %>%
mutate(Confirmed_pc = total_cases/Population) %>%
filter(Province != "Faroe Islands") %>%
mutate(Log_Death_pc = ifelse(Death_pc>0,log(Death_pc),NA))
#mutate(Google_pc = DeathsBeforeGoogle/Population) %>%
#mutate(Log_Google_pc = ifelse(Google_pc>0,log(Google_pc),NA)) %>%
#mutate(DateLockDown = DateLockDown.y)
df_long<-merge(df_long,Ox,by=c("Country","Date"),all=T)
write.csv(df_long,"df_covid_long.rds")
source("ImportLong.R")
setwd("C:/Users/fores/OneDrive - The University of Nottingham/GitHub/COVID-19")
source("ImportLong.R")
readRDS(Ox.rds)
df<-readRDS("df_covid_long.rds")
#Files that require regular updating
## Case Death
## Google
## Oxford
library("tidyverse")
library("countrycode")
`%notin%` <- Negate(`%in%`) # Defines logical operator "not in" for use below
# Import google mobility data ----
source("Google/import_mobility.R")
# Lockdown dates ----
source("LockDown/import_lockdown.R")
# Cases and Deaths ----
source("CasesDeaths/import_cases_deaths.R")
# Weather data ----
#source("Weather/import_weather.R")
# World Value Survey ----
source("WVS/import_wvs.R")
# World Bank data (Rule of Law, Communicable diseases, hospital beds among others) ----
source("WB/import_wb.R")
# PolityIV index ----
source("Politics/import_polityIV.R")
# UN population data ----
source("UN-Population/import_unpop.R")
# Elections ----
source("Politics/import_dpi.R")
# Social preferences ----
source("Briq/import_social-prefs.R")
# Basic country co-variates (source?) ----
source("Countries/import_covariates.R")
# Collectivism - Hofstede ----
source("Collectivism/import_collectivism.R")
# Gelfand data (Government efficiency) ----
source("Government_Gelfand/import_gelfand.R")
# Previous epidemics ----
source("EM-DAT/import_epidemics.R")
# Import long run coefficients obtained from ARDL
lr.coeffs <- read_rds("compliance/LongRunCoefficients_ARDL.rds")
# Merge into single dataframes ----
# Short version (pure cross-section)
source("OxfordTracking/covid-policy-tracker-master/data/import_OxCGRT.R")
# datasets.to.merge.short <- list(mobility_short,
#                           DaysLock_short,
#                           wvs,
#                           weather_short,
#                           wb,
#                           elections,
#                           rol,
#                           social_prefs,
#                           countries,
#                           polityIV,
#                           UNpop,
#                           hf,
#                           Gf_gov,
#                           lr.coeffs
#                           )
#
# df_short <- Reduce(function(...) full_join(..., by='Country'), datasets.to.merge.short) %>%
#   filter(!is.na(Country)) %>%
#   mutate(Death_pc = TotalDeaths/Population) %>%
#   mutate(Death_pc = TotalDeaths/Population) %>%
#   mutate(Confirmed_pc = TotalCases/Population) %>%
#   filter(Province != "Faroe Islands") %>%
#   mutate(Log_Death_pc = ifelse(Death_pc>0,log(Death_pc),NA)) %>%
#   mutate(Google_pc = Google/Population) %>%
#   mutate(Log_Google_pc = ifelse(Google_pc>0,log(Google_pc),NA)) %>%
#   mutate(DateLockDown=as.Date(DateLockDown,format="%d/%m/%Y"))%>%
#   mutate(Date=as.Date(Date))
#
#
#
# write.csv(df_short,"df_covid_short.csv")
# Long version (daily data)
days_mobility_prefs<-merge(merge(mobility,days,by=c('Country','Date'),all=T),social_prefs,by='Country',all=T)
#days_mobility_prefs_regional<-merge(merge(mobility_regional,days,by=c('Country','Date'),all=T),social_prefs_city,by=c('Country'),all=T)
## cannot allocate vector of 156Mb...
datasets.to.merge.long <- list(#days_mobility_prefs_regional,
days_mobility_prefs,
lockdown,
wvs,
wb,
elections,
rol,
#social_prefs,
#social_prefs_city,
countries,
#time_short,
polityIV,
UNpop,
hf,
Gf_gov,
lr.coeffs
)
df_long<- Reduce(function(...) full_join(..., by=c('Country')), datasets.to.merge.long) %>%
filter(!is.na(Country)) %>%
mutate(Death_pc = total_deaths/Population) %>%
mutate(Confirmed_pc = total_cases/Population) %>%
filter(Province != "Faroe Islands") %>%
mutate(Log_Death_pc = ifelse(Death_pc>0,log(Death_pc),NA))
#mutate(Google_pc = DeathsBeforeGoogle/Population) %>%
#mutate(Log_Google_pc = ifelse(Google_pc>0,log(Google_pc),NA)) %>%
#mutate(DateLockDown = DateLockDown.y)
df_long<-merge(df_long,Ox,by=c("Country","Date"),all=T)
View(df_long)
write.csv(df_long,"df_covid_long.rds")
write_rds(df_long,"df_covid_long.rds")
source("ImportLong.R")
q<-df%>%
group_by(Country)%>%
filter(!is.na(Movement),!is.na(StringencyIndex),!is.na(risktaking))%>%
summarise(m=mean(Movement))
q$Country
