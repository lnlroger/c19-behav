for(i in ToAdd){
fig <- fig %>% add_lines(x = index.daily.region[["week"]], y = index.daily.region[[i]], name = i)
}
fig
setwd("C:/Users/lnlro/Dropbox/Research/COVID-19/COVID-19")
# Chunk 1
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE, fig.height = 6, fig.width = 12)
knitr::opts_knit$set(root.dir = "../../")
library(tidyverse)
library(countrycode)
library(stringr)
library(lmerTest)
library(stargazer)
library(mfx)
library(knitr)
library(kSamples)
library(FSA)
library(kableExtra)
library(xtable)
library(miceadds)
library(jtools)
library(plm)
library(clubSandwich)
library(ggrepel)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(naniar)
library(ggpubr)
library(lubridate)
library(ggmap)
library(tufte)
library(plotly)
options("jtools-digits" = 4,scipen=999) # set displayed decimal places to 4
# Chunk 2
rm(list = ls())
gwmp<-readRDS("gwmp.rds")
gwmp$continent <- countrycode(sourcevar = gwmp$Country,
origin = "country.name",
destination = "continent")
gwmp<-gwmp%>%
#dplyr::arrange(Date)%>%
group_by(Country)%>%
mutate(New_cases = ConfirmedCases - dplyr::lag(ConfirmedCases))%>%
mutate(New_deaths = ConfirmedCases - dplyr::lag(ConfirmedDeaths))%>%
ungroup()
city_short<-gwmp%>%
dplyr::filter(!is.na(Movement),!is.na(risktaking),!is.na(Temp_C))%>%
group_by(Country,City)%>%
summarise(
TotalCases=mean(ConfirmedCases,na.rm=T),
TotalDeaths=mean(ConfirmedDeaths,na.rm=T),
Population=mean(population),
COL=first(COL),
Temp_C = mean(Temp_C),
Mobility=mean(Movement),
SI=mean(StringencyIndex.x),
Cnet=mean(index_med_est),
Risk=first(risktaking),
Altruism=first(altruism),
Patience=first(patience),
across(where(is.factor), first),
across(where(is.character), first),
n = n(),
lon = first(lon),
lat = first(lat))
country_short<-gwmp %>%
dplyr::filter(!is.na(Movement),!is.na(risktaking),!is.na(Temp_C))%>%
group_by(Country)%>%
summarise(
TotalCases=mean(ConfirmedCases,na.rm=T),
TotalDeaths=mean(ConfirmedDeaths,na.rm=T),
Population=mean(population),
COL=first(COL),
Temp_C = mean(Temp_C),
Mobility=mean(Movement),
SI=mean(StringencyIndex.x),
Cnet=mean(index_med_est),
Risk=first(risktaking),
Altruism=first(altruism),
Patience=first(patience),
across(where(is.factor), first),
across(where(is.character), first),
n = n())
# Chunk 3
gwmp%>%
filter(!is.na(New_cases))%>%
group_by(continent,week)%>%
summarise(newCases=mean(New_cases))%>%
mutate(label = if_else(week == max(week,na.rm=T), as.character(continent), NA_character_)) %>%
ggplot(aes(x = week, y = newCases, color=continent)) +
geom_line(size=1) +
#scale_colour_brewer(palette = 'Set1')+
#guides(colour="legend")
scale_color_discrete(guide = FALSE)+
theme_minimal()+
theme(text = element_text(size=15))+
geom_label_repel(aes(label = label),
nudge_x = 1,
na.rm = TRUE)
# Chunk 4: COLTD
country_short%>%
filter(TotalDeaths>0)%>%
mutate(DeathNorm=scale(TotalDeaths))%>%
#mutate(COL=100-IDV)%>%
ggscatterhist(x="COL", y="DeathNorm",
#size = "Population.density",
#color = "blacl",
#shape = 1,
label = "Country",
repel = T,
add = "reg.line",
add.params = list(fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
fullrange = TRUE,
cor.coeff.args = list(method = "pearson", label.x = -3.5, label.y = .3, label.sep = "\n", size = 6),
xlab = "Collectivism",
margin.params = list(fill = "lightgray")
)
# Chunk 5: COLTC
country_short%>%
filter(TotalCases>0)%>%
mutate(CaseNorm=scale(TotalCases))%>%
#mutate(COL=100-IDV)%>%
ggscatterhist(x="COL", y="CaseNorm",
#size = "Population.density",
#color = "blacl",
#shape = 1,
label = "Country",
repel = T,
add = "reg.line",
add.params = list(fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
fullrange = TRUE,
cor.coeff.args = list(method = "pearson", label.x = -3.5, label.y = .3, label.sep = "\n", size = 6),
xlab = "Collectivism",
margin.params = list(fill = "lightgray")
)
# Chunk 6
CoronaNet <- read.csv("CoronaNet/coronanet_release.csv") %>%
mutate(continent = countrycode(ISO_A3, "iso3c", "continent")) %>%
mutate(region = countrycode(ISO_A3, "iso3c", "region"))
# By type ----
dta.barchart.type <- CoronaNet %>%
group_by(type) %>%
dplyr::summarise(count = n())
fig <- plot_ly(
x = dta.barchart.type$count,
y = dta.barchart.type$type,
name = "Types of restrictions",
type = "bar"
)
fig
# Chunk 7: type breakdowns
# By sub-type for most frequent types
dta.health.resources <- CoronaNet%>%
filter(type == "Health Resources") %>%
group_by(type_sub_cat) %>%
summarise(count = n())
fig <- plot_ly(
x = dta.health.resources$count,
y = dta.health.resources$type_sub_cat,
name = "Types of restrictions",
type = "bar",
automargin = TRUE
)
fig <- fig %>% layout(autosize = F)
fig
# Chunk 8: lockdown compliance
# Types of quarantine (compliance)
dta.mandatory <- mutate(CoronaNet, compliance_binary = ifelse(substr(compliance,1,9) == "Mandatory", "Mandatory",
ifelse(substr(compliance,1,9) == "Voluntary", "Voluntary", NA))) %>%
filter(type == "Quarantine/Lockdown") %>%
group_by(compliance_binary) %>%
summarise(count = n())
fig <- plot_ly(
x = dta.mandatory$count,
y = dta.mandatory$compliance_binary,
name = "Mandatory vs voluntary lockdown",
type = "bar",
automargin = TRUE
)
fig <- fig %>% layout(autosize = F)
fig
# Chunk 9: lockdown time
# Distribution of lockdown announcements in time
lockdown.per.day <- CoronaNet %>%
filter(type == "Quarantine/Lockdown") %>%
group_by(date_start) %>%
tally()
fig <- plot_ly(data = lockdown.per.day,
x = ~date_start,
y = ~n,
type = "bar")
fig
index.daily.region <- gwmp %>%
filter(!is.na(index_med_est))%>%
group_by(continent, week) %>%
dplyr::summarise(CoronaNet_Policy_Index=mean(index_med_est)) %>%
pivot_wider(id_cols = c("continent","week"),names_from = continent, values_from = CoronaNet_Policy_Index) %>%
dplyr::arrange(week) %>%
fill(-week, .direction = "down")
fig <- plot_ly()%>%
layout(title = "CoronaNet Index over time (by continent)",
xaxis = list(title = ""),
yaxis = list (title = "") )
ToAdd <- setdiff(colnames(index.daily.region),"week")
for(i in ToAdd){
fig <- fig %>% add_lines(x = index.daily.region[["week"]], y = index.daily.region[[i]], name = i)
}
fig
index.daily.region <- gwmp %>%
filter(!is.na(StringencyIndex.x))%>%
group_by(continent, week) %>%
dplyr::summarise(Oxford_Stringency=mean(StringencyIndex.x)) %>%
pivot_wider(id_cols = c("continent","week"),names_from = continent, values_from = Oxford_Stringency) %>%
dplyr::arrange(week) %>%
fill(-week, .direction = "down")
fig <- plot_ly()%>%
layout(title = "OxCGRT over time (by continent)",
xaxis = list(title = ""),
yaxis = list (title = "") )
ToAdd <- setdiff(colnames(index.daily.region),"week")
for(i in ToAdd){
fig <- fig %>% add_lines(x = index.daily.region[["week"]], y = index.daily.region[[i]], name = i)
}
fig
# Scatter
ggplot(
na.omit(gwmp[,c("Date","index_med_est","StringencyIndex.x")]),
aes(x = index_med_est,
y = StringencyIndex.x)
) +
geom_point(size = 0.1) +
geom_smooth(method=lm, color="darkred", fill="blue") +
stat_cor(method = "pearson") +
theme_bw()
# Scatter
ggplot(
na.omit(gwmp[,c("Date","index_med_est","StringencyIndex.x")]),
aes(x = index_med_est,
y = StringencyIndex.x)
) +
geom_point(size = 0.1) +
geom_smooth(method=lm, color="darkred", fill="blue") +
stat_cor(method = "pearson") +
theme_bw()
unique(gwmp$City)
# Scatter
df.compare <- gwmp %>%
filter(City == "")
# Scatter
df.compare <- gwmp %>%
group_by(Country, Date) %>%
summarise(CoronaNet = mean(index_med_est),
OxCGRT = mean(StringencyIndex.x))
ggplot(
na.omit(df.compare[,c("Date","CoronaNet","OxCGRT")]),
aes(x = CoronaNet,
y = OxCGRT)
) +
geom_point(size = 0.1) +
geom_smooth(method=lm, color="darkred", fill="blue") +
stat_cor(method = "pearson") +
theme_bw()
View(df.compare)
# Scatter
df.compare <- gwmp %>%
group_by(Country, Date) %>%
summarise(CoronaNet = mean(index_med_est),
OxCGRT = mean(StringencyIndex.x)) %>%
fill(.direction = "down")
ggplot(
na.omit(df.compare[,c("Date","CoronaNet","OxCGRT")]),
aes(x = CoronaNet,
y = OxCGRT)
) +
geom_point(size = 0.1) +
geom_smooth(method=lm, color="darkred", fill="blue") +
stat_cor(method = "pearson") +
theme_bw()
countries.to.plot <- c(unique(gwmp$Country)[seq(1,163,35)],
"United States",
"Germany",
"South Korea") # Random bunch of countries
unique(gwmp$Country)
seq(1,163,35)
countries.to.plot <- c(unique(gwmp$Country)[seq(1,94,15)],
"United States",
"Germany",
"South Korea") # Random bunch of countries
countries.to.plot
countries.to.plot <- c(unique(gwmp$Country)[seq(1,94,16)],
"United States",
"Germany",
"South Korea") # Random bunch of countries
countries.to.plot
countries.to.plot <- c(unique(gwmp$Country)[seq(1,94,16)],
"United States",
"Germany") # Random bunch of countries
df.plot.ts.gantt <-
gwmp %>%
filter(Country %in% countries.to.plot) %>%
dplyr::select(Country, Date, StringencyIndex,
C1_Flag,
C2_Flag,
C3_Flag,
C4_Flag,
C5_Flag,
C6_Flag,
C7_Flag,) %>%
replace_na(list(C1_Flag = 0,
C2_Flag = 0,
C3_Flag = 0,
C4_Flag = 0,
C5_Flag = 0,
C6_Flag = 0,
C7_Flag = 0))
df.plot.ts.gantt <-
gwmp %>%
filter(Country %in% countries.to.plot) %>%
dplyr::select(Country, Date, StringencyIndex.x,
C1_Flag,
C2_Flag,
C3_Flag,
C4_Flag,
C5_Flag,
C6_Flag,
C7_Flag,) %>%
replace_na(list(C1_Flag = 0,
C2_Flag = 0,
C3_Flag = 0,
C4_Flag = 0,
C5_Flag = 0,
C6_Flag = 0,
C7_Flag = 0))
ggplot(df.plot.ts.gantt, aes(x = Date, y = StringencyIndex)) +
scale_alpha_continuous(range = c(0, 0.3)) +
geom_segment(aes(y = 0, yend = 10,
x = Date, xend = Date,
alpha = as.numeric(C1_Flag)),
inherit.aes = F,
colour = "red", size = 2) +
geom_segment(aes(y = 10, yend = 20,
x = Date, xend = Date,
alpha = as.numeric(C2_Flag)),
inherit.aes = F,
colour = "orange", size = 2) +
geom_segment(aes(y = 20, yend = 30,
x = Date, xend = Date,
alpha = as.numeric(C3_Flag)),
inherit.aes = F,
colour = "yellow", size = 2) +
geom_segment(aes(y = 30, yend = 40,
x = Date, xend = Date,
alpha = as.numeric(C4_Flag)),
inherit.aes = F,
colour = "greenyellow", size = 2) +
geom_segment(aes(y = 40, yend = 50,
x = Date, xend = Date,
alpha = as.numeric(C5_Flag)),
inherit.aes = F,
colour = "green", size = 2) +
geom_segment(aes(y = 50, yend = 60,
x = Date, xend = Date,
alpha = as.numeric(C6_Flag)),
inherit.aes = F,
colour = "turquoise", size = 2) +
geom_segment(aes(y = 60, yend = 70,
x = Date, xend = Date,
alpha = as.numeric(C7_Flag)),
inherit.aes = F,
colour = "blue", size = 2, show.legend = TRUE) +
geom_line() +
ylim(0, 100) +
facet_wrap(~Country, ncol = 4) +
theme_bw() +
theme(legend.position = "none")
df.plot.ts.gantt <-
gwmp %>%
filter(Country %in% countries.to.plot) %>%
dplyr::select(Country, Date, StringencyIndex.x,
C1_Flag,
C2_Flag,
C3_Flag,
C4_Flag,
C5_Flag,
C6_Flag,
C7_Flag,) %>%
replace_na(list(C1_Flag = 0,
C2_Flag = 0,
C3_Flag = 0,
C4_Flag = 0,
C5_Flag = 0,
C6_Flag = 0,
C7_Flag = 0))
df.plot.ts.gantt <-
gwmp %>%
filter(Country %in% countries.to.plot) %>%
dplyr::select(Country, Date, StringencyIndex.x,
C1_Flag,
C2_Flag,
C3_Flag,
C4_Flag,
C5_Flag,
C6_Flag,
C7_Flag,)
View(df.plot.ts.gantt)
df.plot.ts.gantt <-
gwmp %>%
filter(Country %in% countries.to.plot) %>%
dplyr::select(Country, Date, StringencyIndex.x,
C1_Flag,
C2_Flag,
C3_Flag,
C4_Flag,
C5_Flag,
C6_Flag,
C7_Flag,) %>%
tidyr::replace_na(list(C1_Flag = 0,
C2_Flag = 0,
C3_Flag = 0,
C4_Flag = 0,
C5_Flag = 0,
C6_Flag = 0,
C7_Flag = 0))
ggplot(df.plot.ts.gantt, aes(x = Date, y = StringencyIndex)) +
scale_alpha_continuous(range = c(0, 0.3)) +
geom_segment(aes(y = 0, yend = 10,
x = Date, xend = Date,
alpha = as.numeric(C1_Flag)),
inherit.aes = F,
colour = "red", size = 2) +
geom_segment(aes(y = 10, yend = 20,
x = Date, xend = Date,
alpha = as.numeric(C2_Flag)),
inherit.aes = F,
colour = "orange", size = 2) +
geom_segment(aes(y = 20, yend = 30,
x = Date, xend = Date,
alpha = as.numeric(C3_Flag)),
inherit.aes = F,
colour = "yellow", size = 2) +
geom_segment(aes(y = 30, yend = 40,
x = Date, xend = Date,
alpha = as.numeric(C4_Flag)),
inherit.aes = F,
colour = "greenyellow", size = 2) +
geom_segment(aes(y = 40, yend = 50,
x = Date, xend = Date,
alpha = as.numeric(C5_Flag)),
inherit.aes = F,
colour = "green", size = 2) +
geom_segment(aes(y = 50, yend = 60,
x = Date, xend = Date,
alpha = as.numeric(C6_Flag)),
inherit.aes = F,
colour = "turquoise", size = 2) +
geom_segment(aes(y = 60, yend = 70,
x = Date, xend = Date,
alpha = as.numeric(C7_Flag)),
inherit.aes = F,
colour = "blue", size = 2, show.legend = TRUE) +
geom_line() +
ylim(0, 100) +
facet_wrap(~Country, ncol = 4) +
theme_bw() +
theme(legend.position = "none")
ggplot(df.plot.ts.gantt, aes(x = Date, y = StringencyIndex.x)) +
scale_alpha_continuous(range = c(0, 0.3)) +
geom_segment(aes(y = 0, yend = 10,
x = Date, xend = Date,
alpha = as.numeric(C1_Flag)),
inherit.aes = F,
colour = "red", size = 2) +
geom_segment(aes(y = 10, yend = 20,
x = Date, xend = Date,
alpha = as.numeric(C2_Flag)),
inherit.aes = F,
colour = "orange", size = 2) +
geom_segment(aes(y = 20, yend = 30,
x = Date, xend = Date,
alpha = as.numeric(C3_Flag)),
inherit.aes = F,
colour = "yellow", size = 2) +
geom_segment(aes(y = 30, yend = 40,
x = Date, xend = Date,
alpha = as.numeric(C4_Flag)),
inherit.aes = F,
colour = "greenyellow", size = 2) +
geom_segment(aes(y = 40, yend = 50,
x = Date, xend = Date,
alpha = as.numeric(C5_Flag)),
inherit.aes = F,
colour = "green", size = 2) +
geom_segment(aes(y = 50, yend = 60,
x = Date, xend = Date,
alpha = as.numeric(C6_Flag)),
inherit.aes = F,
colour = "turquoise", size = 2) +
geom_segment(aes(y = 60, yend = 70,
x = Date, xend = Date,
alpha = as.numeric(C7_Flag)),
inherit.aes = F,
colour = "blue", size = 2, show.legend = TRUE) +
geom_line() +
ylim(0, 100) +
facet_wrap(~Country, ncol = 4) +
theme_bw() +
theme(legend.position = "none")
